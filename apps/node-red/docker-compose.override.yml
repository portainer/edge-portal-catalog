# ==============================================================================
# DOCKER COMPOSE OVERRIDE FILE - AUTOMATICALLY GENERATED BY PEP
# ==============================================================================
#
# This file is an EXAMPLE of what PEP (Portainer Edge Portal) automatically
# generates and deploys to edge devices based on the application catalog
# configuration defined in catalog.yaml.
#
# HOW IT WORKS:
# 1. Docker Compose automatically merges docker-compose.yml with
#    docker-compose.override.yml when running `docker compose up`
# 2. PEP generates this override file on each device based on:
#    - User-selected configuration templates from configuration.files[].templates
#    - User-provided variable values from configuration.variables
# 3. The original docker-compose.yml remains unchanged (source of truth)
# 4. This override file contains device-specific runtime configuration
#
# WHAT PEP INJECTS:
# - Volume bind mounts for configuration files (from configuration.files)
# - Environment variables (from configuration.variables)
# - Any placeholder replacements (e.g., ((PEP_IMAGE_VERSION)))
#
# NOTE: This file demonstrates the "prod" variant configuration.
# Different variants may generate different override files.
#
# ==============================================================================

version: "3.8"

services:
  nodered:
    # ===========================================================================
    # VOLUME MOUNTS - Injected from configuration.files
    # ===========================================================================
    # Each entry in configuration.files generates a bind mount here
    # PEP ensures these files exist on the device before starting the container
    volumes:
      # Application Configuration
      # Source: User-selected template from configuration.files[0].templates
      # (e.g., production, development, or minimal template)
      - /data/config.json:/tmp/config.json

      # MQTT Broker Configuration
      # Source: User-selected template from configuration.files[1].templates
      # Note: This example shows locked: true in catalog, so always uses "production" template
      - /data/mqtt.json:/tmp/mqtt.json

      # Security Policy
      # Source: Locked to "corporate" template (cannot be changed by user)
      - /data/security.json:/app/security.json

      # SSL Certificate (existing device file)
      # Source: No template - file must already exist on device at /data/certs/ssl.crt
      # PEP only creates the bind mount, does not manage file content
      - /data/certs/ssl.crt:/app/certs/ssl.crt

      # SSH Private Key (existing device file)
      # Source: No template - operator or external process must place this file
      - /data/.ssh/id_rsa:/root/.ssh/id_rsa

    # ===========================================================================
    # ENVIRONMENT VARIABLES - Injected from configuration.variables
    # ===========================================================================
    # These are user-provided values collected during app installation
    # Variables are used for:
    # 1. Replacing ((PEP_VARIABLE_NAME)) placeholders in template files
    # 2. Injecting as environment variables (if placeholder not found in templates)
    environment:
      # From configuration.variables[0] - User provided or default value
      - MQTT_BROKER=mqtt.example.com

      # From configuration.variables[1] - User provided or default value
      - MQTT_PORT=1883

      # From configuration.variables[2] - User provided or default value
      - MQTT_USERNAME=user

      # From configuration.variables[3] - User provided (no default in catalog)
      - MQTT_PASSWORD=secret_password_provided_by_user

# ==============================================================================
# NOTES FOR DEVELOPERS:
# ==============================================================================
#
# 1. ORIGINAL vs OVERRIDE:
#    - docker-compose.yml (in git): Base configuration, ((PEP_IMAGE_VERSION))
#    - docker-compose.override.yml (on device): Runtime config generated by PEP
#
# 2. MERGE BEHAVIOR:
#    - Arrays (volumes, environment): Override APPENDS to original
#    - Scalars (image, restart): Override REPLACES original
#    - See: https://docs.docker.com/compose/multiple-compose-files/merge/
#
# 3. TESTING LOCALLY:
#    To test what the merged result looks like:
#    $ docker compose config
#
# 4. FILE LOCATIONS ON DEVICE:
#    - Configuration files: Managed by PEP in /data/ (or custom device_path)
#    - Template content: Fetched from catalog git repo, rendered with variables
#    - Override file: Generated by PEP in the deployment directory
#
# 5. PLACEHOLDER REPLACEMENT:
#    Before deployment, PEP also replaces placeholders in docker-compose.yml:
#    - ((PEP_IMAGE_VERSION)) â†’ User-selected version (e.g., "3.1.15")
#    This happens before the merge with override file
#
# ==============================================================================
