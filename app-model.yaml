# Application Model Definition
# This file defines an example of an application template for the Portainer Edge Portal (PEP)
# It includes metadata, deployment configurations, and runtime settings

# Global catalog metadata
metadata:
  # Catalog version for tracking changes and compatibility
  version: "1.0"
  # Last updated timestamp
  updated: "2025-07-18T10:30:00Z"
  # Default source repository for deployment files and configurations
  # This is inherited by deployments that don't specify their own git repository
  source:
    # Default git repository containing deployment files and configurations
    git: "github.com/your-org/edge-templates"
    # Default git branch or tag to use when not specified in individual deployments
    ref: "main"

apps:
  node-red:
    # Application metadata - describes the application for users browsing the catalog
    metadata:
      # Display name shown in the application catalog and across the Edge Portal
      name: "Node-RED"
      
      # Brief one-line description that appears in catalog listings
      description: "Low-code programming for event-driven applications"
      
      # Detailed overview explaining the application's purpose and capabilities
      # This appears in when inspecting a catalog entry
      overview: "Node-RED is a powerful tool for building Internet of Things (IoT) applications with a focus on simplifying the creation of event-driven applications. It provides a browser-based flow editor that makes it easy to wire together flows using the wide range of nodes in the palette."
      
      # Organization or entity that maintains this application
      publisher: "OpenJS Foundation"
      
      # Available application versions that can be deployed
      # The ((PEP_IMAGE_VERSION)) placeholder in deployment files will be automatically 
      # replaced with the user-selected version from this list
      versions: ["3.1.14", "3.1.15", "4.0.9"]
      
      # Application category for organizing the catalog (e.g., "databases", "monitoring", "industrial-automation")
      category: "industrial-automation"
      
      # URL to the application's icon/logo
      icon: "https://cdn.example.com/icons/node-red.svg"
      
      # Searchable tags to help users discover this application
      tags: ["automation", "low-code", "mqtt"]
      
      # URLs to application screenshots displayed in the catalog
      # These help users understand the application's interface before deployment
      screenshots:
        - "https://cdn.example.com/screenshots/node-red-dashboard.png"
        - "https://cdn.example.com/screenshots/node-red-flow.png"
      
      # URL to official documentation or user guide
      documentation: "https://docs.example.com/node-red"

    # Application variants - different deployment configurations for the same application
    # Each variant represents a different use case, environment, or configuration
    variants:
      # Production variant - optimized for production deployments
      # When only one variant exists, it becomes the default and won't show variant selection in UI
      prod:
        # Human-readable label for this variant shown in the deployment UI
        label: "Production"
        
        # Variant-specific configuration templates
        # These define default configurations that can be referenced by this variant
        # Configuration files are designed specifically for this variant's expected placeholders
        config_templates:
          # Production configuration template for this variant
          production:
            # Human-readable name for this configuration template
            name: "Node-RED Production Configuration"
            # Description explaining when to use this configuration
            description: "Production-ready Node-RED configuration with security and performance optimizations"
            # Path to configuration file relative to the source repository root
            # This file contains placeholders that match the variables defined in this variant
            path: "apps/node-red/prod/config.json"

          # MQTT-specific configuration for production
          mqtt:
            name: "Node-RED Production MQTT Configuration"
            description: "MQTT broker connection settings for production environment"
            # Path to configuration file relative to the source repository root
            path: "apps/node-red/prod/mqtt.json"
        
        # Deployment configuration - defines how the application is deployed
        # Git properties are optional - when omitted, files are sourced from metadata.source
        deployment:
          # Docker Compose deployment option
          # Inherits git/ref from metadata.source (github.com/your-org/edge-templates@main)
          compose:
            # Path to the docker-compose.yml file relative to the source repository root
            path: "apps/node-red/docker-compose.yml"
          
          # Kubernetes deployment option (for environments supporting Kubernetes)
          # Inherits git/ref from metadata.source (github.com/your-org/edge-templates@main)
          kubernetes:
            # Path to Kubernetes manifest file relative to the source repository root
            path: "apps/node-red/kubernetes.yaml"
          
          # Helm chart deployment option (for Helm-enabled Kubernetes clusters)
          # This example shows external repository usage for Helm charts
          helm:
            # External git repository containing the Helm chart (overrides metadata.source)
            git: "github.com/your-org/helm-charts"
            # Git branch or tag to use for the Helm chart (overrides metadata.source.ref)
            ref: "v1.0.0"
            # Path to the Helm chart within the repository (chart name)
            path: "node-red"
            # Chart name to use for installation - specific to Helm
            chart: "node-red"

        # Runtime configuration system for device-specific and location-specific settings
        # This section is optional - omit if no custom configuration is needed
        configuration:
          # Configuration files that can be mounted into the container
          # Users select pre-defined configurations from the Edge Portal's Configuration area
          configs:
            - # User-friendly label for this configuration file
              label: "NodeRed Configuration File"
              # Path on the edge device where the config file will be stored
              device_path: "/data/config.json"
              # Path inside the container where the config file will be mounted
              # If omitted, device_path will be used (e.g., -v /data/config.json:/data/config.json)
              container_path: "/tmp/config.json"
              # Reference to variant-specific configuration template
              # This provides a default configuration that will be automatically fetched during app installation
              default_config_ref: "production"
              
            - # Example of a second config file for MQTT settings
              label: "MQTT Configuration"
              device_path: "/data/mqtt.json"
              container_path: "/tmp/mqtt.json"
              # Reference to variant-specific MQTT configuration template
              default_config_ref: "mqtt"

          # Variables for dynamic configuration replacement and environment injection
          # The system looks for placeholders like ((PEP_VARIABLE_NAME)) in config files
          # If placeholder exists: replaces it with the variable value
          # If placeholder not found: injects as environment variable VARIABLE_NAME
          vars:
            - # Variable identifier (used in placeholders and environment variables)
              name: "MQTT_BROKER"
              # User-friendly label shown in the app installation form
              label: "MQTT Broker Address"
              # Default value pre-filled in the app installation form
              # Default value is optional
              default: "mqtt.example.com"
              
            - name: "MQTT_PORT"
              label: "MQTT Port"
              default: "1883"
              
            - name: "MQTT_USERNAME"
              label: "MQTT Username"
              default: "user"
              
            - name: "MQTT_PASSWORD"
              label: "MQTT Password"

      # Testing variant - configured for development and testing environments
      # Typically uses different branches, configurations, or resource allocations
      test:
        # Display label for this testing variant
        label: "Testing"
        
        # Variant-specific configuration templates for testing environment
        config_templates:
          # Development configuration template with debug capabilities
          development:
            name: "Node-RED Development Configuration"
            description: "Development configuration with debug logging and relaxed security"
            # Path to configuration file that includes DEBUG_MODE placeholder
            path: "apps/node-red/test/config.json"
        
        deployment:
          # Only Docker Compose deployment available for this variant
          # This example shows referencing a third-party repository for the deployment files
          compose:
            # External git repository (e.g., official Node-RED examples) - overrides metadata.source
            git: "github.com/node-red/node-red-docker"
            # Uses a specific branch or tag - overrides metadata.source.ref
            ref: "main"
            # Path to the docker-compose.yml file within the external repository
            path: "docker-compose.yml"
        
        # Testing variant configuration with variables that match expected placeholders in test config files
        configuration:
          configs:
            - label: "NodeRed Configuration File"
              device_path: "/data/config.json"
              container_path: "/tmp/config.json"
              # Use development configuration template for testing
              default_config_ref: "development"
          # Variables that match the placeholders in apps/node-red/test/config.json
          vars:
            - name: "DEBUG_MODE"
              label: "Enable Debug Mode"
              default: "true"
            - name: "MQTT_BROKER"
              label: "MQTT Broker Address (Test)"
              default: "mqtt.test.example.com"
            - name: "MQTT_PORT"
              label: "MQTT Port"
              default: "1883"