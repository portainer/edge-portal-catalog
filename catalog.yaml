metadata:
  version: "1.0"
  updated: "2025-07-18T10:30:00Z"
  source:
    git: "github.com/your-org/edge-templates"
    ref: "main"

apps:
  tensorflow:
    metadata:
      name: "TensorFlow"
      description: "Machine learning framework"
      overview: "TensorFlow is an open-source machine learning framework that enables developers to build and deploy ML models at scale. With support for both training and inference, TensorFlow provides a comprehensive ecosystem for developing intelligent applications on edge devices. Perfect for industrial AI applications requiring real-time processing and analysis."
      publisher: "Google"
      versions: ["2.15.0"]
      category: "machine-learning"
      icon: "https://cdn.example.com/icons/tensorflow.svg"
      tags: ["machine-learning", "tensorflow"]
      screenshots:
        - "https://cdn.example.com/screenshots/tensorflow-dashboard.png"
        - "https://cdn.example.com/screenshots/tensorflow-flow.png"
      documentation: "https://docs.example.com/tensorflow"  
    variants:
      prod:
        label: "Production"
        # No version requirements needed - only one version available
        # version_requirements:
        #   min: "2.15.0"  # Could be added when more versions are available
        deployment:
          compose:
            path: "apps/tensorflow/docker-compose.yml"
    requirements:
      minMemory: "1GB"
      architecture: ["amd64"]

  influxdb:
    metadata:
      name: "InfluxDB"
      description: "Time-series database"
      overview: "InfluxDB is a time-series database that is designed to handle high write and query loads. It is a core component of the TICK stack and is used for storing and querying time-series data."
      publisher: "InfluxData"
      versions: ["1.10.0"]
      category: "database"
      icon: "https://cdn.example.com/icons/influxdb.svg"
      tags: ["database", "time-series"]
      screenshots:
        - "https://cdn.example.com/screenshots/influxdb-dashboard.png"
        - "https://cdn.example.com/screenshots/influxdb-flow.png"
      documentation: "https://docs.example.com/influxdb"
    variants:
      prod:
        label: "Production"
        # No version requirements needed - only one version available
        # version_requirements:
        #   min: "1.10.0"  # Could be added when more versions are available
        config_templates:
          production:
            name: "InfluxDB Production Configuration"
            description: "Production configuration for InfluxDB"
            path: "apps/influxdb/prod/config.conf"
        deployment:
          compose:
            path: "apps/influxdb/docker-compose.yml"
        configuration:
          configs:
            - label: "InfluxDB Configuration File"
              device_path: "/data/influxdb.conf"
              container_path: "/etc/influxdb/influxdb.conf"
              default_config_ref: "production"
          vars:
            - name: "INFLUXDB_ADMIN_PASSWORD"
              label: "InfluxDB Admin Password"
    requirements:
      minMemory: "1GB"
      architecture: ["amd64"]

  grafana:
    metadata:
      name: "Grafana"
      description: "Visualize and monitor data"
      overview: "Grafana is an open-source platform for monitoring and observability. It is a core component of the TICK stack and is used for visualizing and monitoring time-series data."
      publisher: "Grafana Labs"
      versions: ["10.0.0", "11.0.0"]
      category: "visualization"
      icon: "https://cdn.example.com/icons/grafana.svg"
      tags: ["visualization", "monitoring"]
      screenshots:
        - "https://cdn.example.com/screenshots/grafana-dashboard.png"
        - "https://cdn.example.com/screenshots/grafana-flow.png"
      documentation: "https://docs.example.com/grafana"
    variants:
      prod:
        label: "Production"
        # No version requirements needed - only one variant available
        config_templates:
          production:
            name: "Grafana Production Configuration"
            description: "Production configuration for Grafana"
            path: "apps/grafana/prod/grafana.ini"
        deployment:
          compose:
            path: "apps/grafana/docker-compose.yml"
        configuration:
          configs:
            - label: "Grafana Configuration File"
              device_path: "/data/grafana.ini"
              container_path: "/etc/grafana/grafana.ini"
              default_config_ref: "production"
          vars:
            - name: "GF_SECURITY_ADMIN_PASSWORD"
              label: "Grafana Admin Password"
    requirements:
      minMemory: "512MB"
      architecture: ["amd64"]

  node-red:
    metadata:
      name: "Node-RED"
      description: "Low-code programming for event-driven applications"
      overview: "Node-RED is a powerful tool for building Internet of Things (IoT) applications with a focus on simplifying the creation of event-driven applications. It provides a browser-based flow editor that makes it easy to wire together flows using the wide range of nodes in the palette."
      publisher: "OpenJS Foundation"
      versions: ["3.1.14", "3.1.15", "4.0.9"]
      category: "industrial-automation"
      icon: "https://cdn.example.com/icons/node-red.svg"
      tags: ["automation", "low-code", "mqtt"]
      screenshots:
        - "https://cdn.example.com/screenshots/node-red-dashboard.png"
        - "https://cdn.example.com/screenshots/node-red-flow.png"
      documentation: "https://docs.example.com/node-red"
    variants:
      prod:
        label: "Production"
        # Production variant requires minimum version for security and performance features
        version_requirements:
          min: "3.1.15"  # Requires security patches and performance improvements
        config_templates:
          production:
            name: "Node-RED Production Configuration"
            description: "Production-ready Node-RED configuration with security and performance optimizations"
            path: "apps/node-red/prod/config.json"
          mqtt:
            name: "Node-RED Production MQTT Configuration"
            description: "MQTT broker connection settings for production environment"
            path: "apps/node-red/prod/mqtt.json"
        deployment:
          compose:
            path: "apps/node-red/docker-compose.yml"
          kubernetes:
            path: "apps/node-red/kubernetes.yaml"
          helm:
            git: "github.com/your-org/helm-charts"
            ref: "v1.0.0"
            path: "node-red"
            chart: "node-red"
        configuration:
          configs:
            - label: "NodeRed Configuration File"
              device_path: "/data/config.json"
              container_path: "/tmp/config.json"
              default_config_ref: "production"
            - label: "MQTT Configuration"
              device_path: "/data/mqtt.json"
              container_path: "/tmp/mqtt.json"
              default_config_ref: "mqtt"
          vars:
            - name: "MQTT_BROKER"
              label: "MQTT Broker Address"
              default: "mqtt.example.com"
            - name: "MQTT_PORT"
              label: "MQTT Port"
              default: "1883"
            - name: "MQTT_USERNAME"
              label: "MQTT Username"
              default: "user"
            - name: "MQTT_PASSWORD"
              label: "MQTT Password"
      test:
        label: "Testing"
        # Testing variant uses legacy compatibility - breaks with v4.x due to API changes
        version_requirements:
          max: "3.9.99"  # Only works with v3.x series, breaks in v4.x
        config_templates:
          development:
            name: "Node-RED Development Configuration"
            description: "Development configuration with debug logging and relaxed security"
            path: "apps/node-red/test/config.json"
        deployment:
          compose:
            path: "apps/node-red/docker-compose-test.yml"
        configuration:
          configs:
            - label: "NodeRed Configuration File"
              device_path: "/data/config.json"
              container_path: "/tmp/config.json"
              default_config_ref: "development"
          vars:
            - name: "DEBUG_MODE"
              label: "Enable Debug Mode"
              default: "true"

    requirements:
      minMemory: "512MB"
      architecture: ["amd64", "arm64"]

  mosquitto:
    metadata:
      name: "Mosquitto"
      description: "MQTT broker"
      overview: "Mosquitto is an open-source MQTT broker that is used for building IoT applications. It is a core component of the TICK stack and is used for storing and querying time-series data."
      publisher: "Eclipse Foundation"
      versions: ["2.0.17", "2.0.18", "2.0.19", "2.0.20", "2.0.21"]
      category: "iot"
      icon: "https://cdn.example.com/icons/mosquitto.svg"
      tags: ["mqtt", "broker"]
      screenshots:
        - "https://cdn.example.com/screenshots/mosquitto-dashboard.png"
        - "https://cdn.example.com/screenshots/mosquitto-flow.png"
      documentation: "https://docs.example.com/mosquitto"
    variants:
      prod:
        label: "Production"
        # Production variant requires recent version with critical bug fixes
        version_requirements:
          min: "2.0.19"  # Requires critical security and stability fixes
        config_templates:
          production:
            name: "Mosquitto Production Configuration"
            description: "Production configuration for Mosquitto broker"
            path: "apps/mosquitto/prod/mosquitto.conf"
        deployment:
          compose:
            path: "apps/mosquitto/docker-compose.yml"
          kubernetes:
            path: "apps/mosquitto/kubernetes.yaml"
          helm:
            git: "github.com/your-org/helm-charts"
            ref: "v1.0.0"
            path: "mosquitto"
            chart: "mosquitto"
        configuration:
          configs:
            - label: "Mosquitto Configuration File"
              device_path: "/data/mosquitto.conf"
              container_path: "/mosquitto/config/mosquitto.conf"
              default_config_ref: "production"
          vars:
            - name: "MQTT_PORT"
              label: "MQTT Port"
              default: "1883"
            - name: "MQTT_USERNAME"
              label: "MQTT Username"
              default: "admin"
            - name: "MQTT_PASSWORD"
              label: "MQTT Password"
              default: "admin"
      test:
        label: "Testing"
        # Testing variant works with all versions for maximum compatibility
        # No version requirements - supports all available versions
        config_templates:
          test:
            name: "Mosquitto Test Configuration"
            description: "Test configuration for Mosquitto broker"
            path: "apps/mosquitto/test/mosquitto.conf"
        deployment:
          compose:
            path: "apps/mosquitto/docker-compose.yml"
        configuration:
          configs:
            - label: "Mosquitto Configuration File"
              device_path: "/data/mosquitto.conf"
              container_path: "/mosquitto/config/mosquitto.conf"
              default_config_ref: "test"
          vars:
            - name: "MQTT_PORT"
              label: "MQTT Port"
              default: "1883"
            - name: "MQTT_USERNAME"
              label: "MQTT Username"
      advanced:
        label: "Advanced"
        # Advanced variant requires latest version for enhanced ACL and authentication features
        version_requirements:
          min: "2.0.20"  # Requires enhanced ACL and authentication features
        config_templates:
          advanced:
            name: "Mosquitto Advanced Configuration"
            description: "Advanced configuration with ACL and password files"
            path: "apps/mosquitto/advanced/mosquitto.conf"
          password:
            name: "Mosquitto Password File"
            description: "Password file for Mosquitto authentication"
            path: "apps/mosquitto/advanced/mosquitto.password"
          acl:
            name: "Mosquitto ACL File"
            description: "Access control list for Mosquitto"
            path: "apps/mosquitto/advanced/mosquitto.acl"
        deployment:
          compose:
            path: "apps/mosquitto/docker-compose.yml"
        configuration:
          configs:
            - label: "Mosquitto Configuration File"
              device_path: "/data/mosquitto.conf"
              container_path: "/mosquitto/config/mosquitto.conf"
              default_config_ref: "advanced"
            - label: "Mosquitto Password File"
              device_path: "/data/mosquitto.password"
              container_path: "/mosquitto/config/mosquitto.password"
              default_config_ref: "password"
            - label: "Mosquitto ACL File"
              device_path: "/data/mosquitto.acl"
              container_path: "/mosquitto/config/mosquitto.acl"
              default_config_ref: "acl"
          vars:
            - name: "MQTT_PORT"
              label: "MQTT Port"
              default: "1883"
            - name: "MQTT_USERNAME"
              label: "MQTT Username"
              default: "admin"
            - name: "MQTT_PASSWORD"
              label: "MQTT Password"
              default: "admin"
            - name: "MQTT_ACL_RULE"
              label: "MQTT ACL RULE"
              default: "allow all"
    requirements:
      minMemory: "512MB"
      architecture: ["amd64", "arm64"]

