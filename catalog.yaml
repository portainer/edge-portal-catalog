metadata:
  version: "1.0"
  updated: "2024-01-15T10:30:00Z"

apps:
  tensorflow:
    metadata:
      name: "TensorFlow"
      description: "Machine learning framework"
      overview: "TensorFlow is an open-source machine learning framework that enables developers to build and deploy ML models at scale. With support for both training and inference, TensorFlow provides a comprehensive ecosystem for developing intelligent applications on edge devices. Perfect for industrial AI applications requiring real-time processing and analysis."
      publisher: "Google"
      versions: ["2.15.0"]
      category: "machine-learning"
      icon: "https://cdn.example.com/icons/tensorflow.svg"
      tags: ["machine-learning", "tensorflow"]
      screenshots:
        - "https://cdn.example.com/screenshots/tensorflow-dashboard.png"
        - "https://cdn.example.com/screenshots/tensorflow-flow.png"
      documentation: "https://docs.example.com/tensorflow"  
    variants:
      prod:
        label: "Production"
        deployment:
          compose:
            git: "github.com/your-org/edge-templates"
            ref: "v1.0.0"
            path: "tensorflow/docker-compose.yml"
    requirements:
      minMemory: "1GB"
      architecture: ["amd64"]

  influxdb:
    metadata:
      name: "InfluxDB"
      description: "Time-series database"
      overview: "InfluxDB is a time-series database that is designed to handle high write and query loads. It is a core component of the TICK stack and is used for storing and querying time-series data."
      publisher: "InfluxData"
      versions: ["1.10.0"]
      category: "database"
      icon: "https://cdn.example.com/icons/influxdb.svg"
      tags: ["database", "time-series"]
      screenshots:
        - "https://cdn.example.com/screenshots/influxdb-dashboard.png"
        - "https://cdn.example.com/screenshots/influxdb-flow.png"
      documentation: "https://docs.example.com/influxdb"
    variants:
      prod:
        label: "Production"
        deployment:
          compose:
            git: "github.com/your-org/edge-templates"
            ref: "v1.0.0"
            path: "influxdb/docker-compose.yml"
        configuration:
          vars:
            - name: "INFLUXDB_ADMIN_PASSWORD"
              label: "InfluxDB Admin Password"
    requirements:
      minMemory: "1GB"
      architecture: ["amd64"]

  grafana:
    metadata:
      name: "Grafana"
      description: "Visualize and monitor data"
      overview: "Grafana is an open-source platform for monitoring and observability. It is a core component of the TICK stack and is used for visualizing and monitoring time-series data."
      publisher: "Grafana Labs"
      versions: ["10.0.0", "11.0.0"]
      category: "visualization"
      icon: "https://cdn.example.com/icons/influxdb.svg"
      tags: ["database", "time-series"]
      screenshots:
        - "https://cdn.example.com/screenshots/influxdb-dashboard.png"
        - "https://cdn.example.com/screenshots/influxdb-flow.png"
      documentation: "https://docs.example.com/influxdb"
    variants:
      prod:
        label: "Production"
        deployment:
          compose:
            git: "github.com/your-org/edge-templates"
            ref: "v1.0.0"
            path: "grafana/docker-compose.yml"
        configuration:
          configs:
            - label: "Grafana Configuration File"
              device_path: "/data/grafana.ini"
          vars:
            - name: "GF_SECURITY_ADMIN_PASSWORD"
              label: "Grafana Admin Password"
    requirements:
      minMemory: "512MB"
      architecture: ["amd64"]

  node-red:
    metadata:
      name: "Node-RED"
      description: "Low-code programming for event-driven applications"
      overview: "Node-RED is a powerful tool for building Internet of Things (IoT) applications with a focus on simplifying the creation of event-driven applications. It provides a browser-based flow editor that makes it easy to wire together flows using the wide range of nodes in the palette."
      publisher: "OpenJS Foundation"
      versions: ["3.1.14", "3.1.15", "4.0.9"]
      category: "industrial-automation"
      icon: "https://cdn.example.com/icons/node-red.svg"
      tags: ["automation", "low-code", "mqtt"]
      screenshots:
        - "https://cdn.example.com/screenshots/node-red-dashboard.png"
        - "https://cdn.example.com/screenshots/node-red-flow.png"
      documentation: "https://docs.example.com/node-red"
    variants:
      prod:
        label: "Production"
        deployment:
          compose:
            git: "github.com/your-org/edge-templates"
            ref: "main"
            path: "node-red/docker-compose.yml"
          kubernetes:
            git: "github.com/your-org/edge-templates"
            ref: "v1.0.0"
            path: "node-red/kubernetes.yaml"
          helm:
            git: "github.com/your-org/edge-templates"
            ref: "v1.0.0"
        configuration:
          configs:
            - label: "NodeRed Configuration File"
              device_path: "/data/config.json"
              container_path: "/tmp/config.json"
          vars:
            - name: "MQTT_BROKER"
              label: "MQTT Broker Address"
              default: "mqtt.example.com"
            - name: "MQTT_PORT"
              label: "MQTT Port"
              default: "1883"
            - name: "MQTT_USERNAME"
              label: "MQTT Username"
              default: "user"
            - name: "MQTT_PASSWORD"
              label: "MQTT Password"
      test:
        label: "Testing"
        deployment:
          compose:
            git: "github.com/your-org/edge-templates"
            ref: "test-branch"
            path: "node-red/docker-compose.yml"
    requirements:
      minMemory: "512MB"
      architecture: ["amd64", "arm64"]

  mosquitto:
    metadata:
      name: "Mosquitto"
      description: "MQTT broker"
      overview: "Mosquitto is an open-source MQTT broker that is used for building IoT applications. It is a core component of the TICK stack and is used for storing and querying time-series data."
      publisher: "Eclipse Foundation"
      versions: ["2.0.17", "2.0.18", "2.0.19", "2.0.20", "2.0.21"]
      category: "iot"
      icon: "https://cdn.example.com/icons/mosquitto.svg"
      tags: ["mqtt", "broker"]
      screenshots:
        - "https://cdn.example.com/screenshots/mosquitto-dashboard.png"
        - "https://cdn.example.com/screenshots/mosquitto-flow.png"
      documentation: "https://docs.example.com/mosquitto"
    variants:
      prod:
        label: "Production"
        deployment:
          compose:
            git: "github.com/your-org/edge-templates"
            ref: "main"
            path: "mosquitto/docker-compose.yml"
          kubernetes:
            git: "github.com/your-org/edge-templates"
            ref: "v1.0.0"
            path: "mosquitto/kubernetes.yaml"
          helm:
            git: "github.com/your-org/edge-templates"
            ref: "v1.0.0"
        configuration:
          configs:
            - label: "Mosquitto Configuration File"
              device_path: "/data/mosquitto.conf"
          vars:
            - name: "MQTT_PORT"
              label: "MQTT Port"
              default: "1883"
            - name: "MQTT_USERNAME"
              label: "MQTT Username"
              default: "admin"
            - name: "MQTT_PASSWORD"
              label: "MQTT Password"
              default: "admin"
      test:
        label: "Testing"
        deployment:
          compose:
            git: "github.com/your-org/edge-templates"
            ref: "test-branch"
            path: "mosquitto/docker-compose.yml"
        configuration:
          vars:
            - name: "MQTT_PORT"
              label: "MQTT Port"
              default: "1883"
            - name: "MQTT_USERNAME"
              label: "MQTT Username"
      advanced:
        label: "Advanced"
        deployment:
          compose:
            git: "github.com/your-org/edge-templates"
            ref: "test-branch"
            path: "mosquitto/docker-compose.yml"
        configuration:
          configs:
            - label: "Mosquitto Configuration File"
              device_path: "/data/mosquitto.conf"
            - label: "Mosquitto Password File"
              device_path: "/data/mosquitto.password"
            - label: "Mosquitto ACL File"
              device_path: "/data/mosquitto.acl"
          vars:
            - name: "MQTT_PORT"
              label: "MQTT Port"
              default: "1883"
            - name: "MQTT_USERNAME"
              label: "MQTT Username"
              default: "admin"
            - name: "MQTT_PASSWORD"
              label: "MQTT Password"
              default: "admin"
            - name: "MQTT_ACL_RULE"
              label: "MQTT ACL RULE"
              default: "allow all"

    requirements:
      minMemory: "512MB"
      architecture: ["amd64", "arm64"]

